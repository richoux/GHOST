name: MacOS

on:
  push:
    branches-ignore:
      - 'feature/*'
  pull_request:
    branches-ignore:
      - 'feature/*'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CXX: clang++
  EXPERIMENTAL: ""

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Update clang
      run: |
        #brew update
        #brew upgrade
        #brew upgrade llvm
        export CXX="/usr/local/opt/llvm/bin/clang++"

    - name: Install gtest manually
      run: git clone https://github.com/google/googletest.git && cd googletest && mkdir build && cd build && cmake .. && make && sudo make install

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/GHOST/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/GHOST/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_COMPILER=$CXX $EXPERIMENTAL ..

    - name: Build GHOST
      working-directory: ${{runner.workspace}}/GHOST/build
      shell: bash
      run: make

    - name: Install GHOST
      working-directory: ${{runner.workspace}}/GHOST/build
      shell: bash
      run: sudo make install && sudo update_dyld_shared_cache
            
    - name: Build Test
      working-directory: ${{runner.workspace}}/GHOST/tests
      run: export CXXFLAGS=-isystem\ /usr/local/include && export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib" && cp /usr/local/lib/libgtest*.a . && mkdir build && cd build && cmake .. && make 
  
    - name: Run Test
      working-directory: ${{runner.workspace}}/GHOST/tests/build
      shell: bash
      run: ctest
            
    - name: Build Tutorial Wiki
      working-directory: ${{runner.workspace}}/GHOST/tutorial/wiki
      run: export CXXFLAGS=-isystem\ /usr/local/include && export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib" && cp /usr/local/lib/libgtest*.a . && mkdir -p build && cd build && cmake .. && make 
            
    - name: Build Tutorial Video
      working-directory: ${{runner.workspace}}/GHOST/tutorial/video
      run: export CXXFLAGS=-isystem\ /usr/local/include && export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib" && cp /usr/local/lib/libgtest*.a . && mkdir -p build && cd build && cmake .. && make 
